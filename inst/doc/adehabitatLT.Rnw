\documentclass{article}
% \VignetteIndexEntry{adehabitatLT: Analysis of Animal Movements}

\usepackage{graphicx}
\usepackage[colorlinks=true,urlcolor=blue]{hyperref}

\usepackage{color}
\usepackage{url}

\usepackage{Sweave}
\newcommand{\strong}[1]{{\normalfont\fontseries{b}\selectfont #1}}
\let\pkg=\strong
\DeclareTextSymbol{\degre}{T1}{6}

\title{ Analysis of Animal Movements in R:\\
the {\tt adehabitatLT} Package }
\author{Clement Calenge,\\
  Office national de la chasse et de la faune
  sauvage\\
  Saint Benoist -- 78610 Auffargis -- France.}
\date{Feb 2011}

\begin{document}

\maketitle
\tableofcontents


<<echo=FALSE>>=
owidth <- getOption("width")
options("width"=80)
ow <- getOption("warn")
options("warn"=-1)
.PngNo <- 0
wi <- 600
pt <- 15
@

<<label=afig,echo=FALSE,eval=FALSE>>=
.PngNo <- .PngNo + 1; file <- paste("Fig-bitmap-",
          .PngNo, ".png", sep="")
png(file=file, width = wi, height = wi, pointsize = pt)
@

<<label=zfig,echo=FALSE,eval=FALSE>>=
dev.null <- dev.off()
cat("\\includegraphics[height=10cm,width=10cm]{", file, "}\n\n", sep="")
@

<<label=zfigg,echo=FALSE,eval=FALSE>>=
dev.null <- dev.off()
cat("\\includegraphics[height=14cm,width=14cm]{", file, "}\n\n", sep="")
@


\section{History of the package adehabitatLT}

The package {\tt adehabitatLT} contains functions dealing with the
analysis of animal movements that were originally available in
the package {\tt adehabitat} (Calenge, 2006).  The data used for such
analysis are generally relocation data collected on animals monitored
using VHF or GPS collars.\\

I developped the package {\tt adehabitat} during my PhD (Calenge, 2005)
to make easier the analysis of habitat selection by animals.  The
package {\tt adehabitat} was designed to extend the capabilities of
the package {\tt ade4} concerning studies of habitat selection by
wildlife.\\

Since its first submission to CRAN in September 2004, a lot of
work has been done on the management and analysis of spatial data in
R, and especially with the release of the package {\tt sp} (Pebesma
and Bivand, 2005).  The package {\tt sp} provides classes of data that
are really useful to deal with spatial data...\\

In addition, with the increase of both the number (more than 250
functions in Oct. 2008) and the diversity of the functions in the
package \texttt{adehabitat}, it soon became apparent that a reshaping
of the package was needed, to make its content clearer to the users.  I
decided to ``split'' the package {\tt adehabitat} into four packages:\\

\begin{itemize}
\item {\tt adehabitatHR} package provides classes and methods for dealing
  with home range analysis in R.
\item {\tt adehabitatHS} package provides classes and methods for dealing
  with habitat selection analysis in R.
\item {\tt adehabitatLT} package provides classes and methods for dealing
  with animals trajectory analysis in R.
\item {\tt adehabitatMA} package provides classes and methods for dealing
  with maps in R.\\
\end{itemize}

We consider in this document the use of the package {\tt adehabitatLT}
to deal with the analysis of animal movements.  All the methods
available in \texttt{adehabitat} are also available in
\texttt{adehabitatLT}. Contrary to the other brother packages, the
classes of data returned by the functions of \texttt{adehabitatLT} are
the same as those implemented in the original package
\texttt{adehabitat}. Indeed, the structure of these classes were
described in a paper (Calenge et al. 2009).\\


Package {\tt adehabitatLT} is loaded by

<<echo=TRUE,print=FALSE>>=
library(adehabitatLT)
@

<<echo=FALSE,print=FALSE>>=
set.seed(13431)
@

\section{What is a trajectory?}

\subsection{Two types of trajectories}

We designed the class \texttt{ltraj} to store the movements of animals
monitored using radio-tracking, GPS, etc. The rationale underlying the
structure of this class is described precisely in Calenge et
al. (2009). We summarize this rationale in this vignette.\\

Basically, the trajectory of an animal is the curve described by the
animal when it moves. The sampling of the trajectory implies a step of
discretization, i.e., the division of this continuous curve into a
number of discrete ``steps'' connecting successive relocations of the
animal (Turchin, 1998). Two main classes of trajectories can be
distinguished:\\

\begin{itemize}
\item \textbf{Trajectories of type I} are characterized by the fact
  that the time is not precisely known or not taken into account for
  the relocations of the trajectory;\\
\item \textbf{the trajectories of type II} are characterized by the
  fact that the time is known for each relocation. This type of
  trajectory may in turn be divided into two subtypes:\\
  \begin{itemize}
  \item \textbf{regular trajectories}: these trajectories are
    characterized by a constant time lag between successive
    relocations;\\
  \item \textbf{irregular trajectories}: these trajectories are
    characterized by a variable time lag between successive
    relocations;\\
  \end{itemize}
\end{itemize}

Note that the functions of \texttt{adehabitatLT} are mainly designed
to deal with type I or type II regular trajectories. Irregular
trajectories are harder to analyze, as the descriptive
parameters of these trajectories (see below) may not be compared when
computed on different time lags.


\subsection{Descriptive parameters of the trajectory}
\label{sec:param}

Marsh and Jones (1988) noted that a good description of the trajectory
is achieved when the following criteria are fullfilled:\\

\begin{itemize}
\item the description is achieved with a minimum set of relatively
  easily measured parameters;
\item the relationships between these parameters are defined precisely
  (e.g., with the help of a model);
\item the parameters and the relationships between them are
  sufficient to reconstruct characteristic tracks without loosing
  any of their significant properties.\\
\end{itemize}

Based on a literature review (see Calenge et al. 2009), we have chosen
to characterize all the trajectories by the following parameters:

<<label=ploltraj,echo=FALSE,fig=FALSE,eval=FALSE>>=
par(mar=c(0.1,0.1,0.1,0.1))
plot(c(0,1), c(0,1), ty="n", axes=FALSE)
x <- c(0.2, 0.3, 0.5, 0.7, 0.4)
y <- c(0.5, 0.3, 0.35, 0.6, 0.9)
points(x,y, pch=16, cex=2)
points(x[1],y[1], pch=16, col="green")
lines(x,y, lty=1)
arrows(0.4, 0.9, 0.1, 0.8, lty=2, length=0.1)
lines(c(0.5, 0.7),c(0.35, 0.6), lwd=6)
lines(c(0.5, 0.7),c(0.35, 0.6), lwd=2, col="red")

## dx
arrows(0.5, 0.32, 0.7, 0.32, code=3, length=0.15)
text(0.6, 0.3, "dx")

## dy
arrows(0.75, 0.35, 0.75, 0.6, code=3, length=0.15)
text(0.77, 0.5, "dy")

## abs.angle
ang <- atan2(0.25, 0.2)
ang <- seq(0,ang, length=10)
xa <- 0.05*cos(ang) + 0.5
ya <- 0.05*sin(ang) + 0.35
lines(c(0.5, 0.7),c(0.35, 0.35), lty=3, col="red")
lines(xa, ya, col="red", lwd=2)
text(0.56, 0.38, expression(alpha), col="red")

## rel.angle
lines(c(0.3, 0.5),c(0.3, 0.35), col="blue", lwd=2)
lines(c(0.5, 0.7),c(0.35, 0.4), lty=3, col="blue")

ang1 <- atan2(0.25, 0.2)
ang0 <- atan2(0.05, 0.2)
ang <- ang0+seq(0, ang1-ang0, length=10)
xa <- 0.1*cos(ang) + 0.5
ya <- 0.1*sin(ang) + 0.35
lines(xa, ya, col="blue", lwd=2)
xa <- 0.107*cos(ang) + 0.5
ya <- 0.107*sin(ang) + 0.35
lines(xa, ya, col="blue", lwd=2)
text(0.61, 0.43,expression(beta), col="blue")

## dist
arrows(0.48, 0.37, 0.68, 0.62, code=3, length=0.1)
text(0.53, 0.5, "dist, dt")

## R2n
arrows(0.21, 0.5, 0.49, 0.35, col="darkgreen", code=3, length=0.1)
text(0.35, 0.49, expression(R[n]^2))

## The legend:
text(0.2, 0.2, expression(paste(alpha, ": abs.angle")), col="red")
text(0.2, 0.17, expression(paste(beta, ": rel.angle")), col="blue")

## x0, y0, t0
text(0.14, 0.5, expression(paste(x[0], ", ", y[0], ", ", t[0])),
     col="darkgreen")

box()
@



\begin{center}
<<results=tex,echo=FALSE>>=
<<afig>>
<<ploltraj>>
<<zfig>>
@
\end{center}


\begin{itemize}
\item \texttt{dx, dy, dt}: these parameters measured at relocation $i$
  describe the increments of the x and y directions and time between
  the relocations $i$ and $i+1$. Such parameters are often used in the
  framework of stochastic differential equation modelling
  (e.g. Brillinger et al. 2004, Wiktorsson et al. 2004);\\
\item \texttt{dist}: the distance between successive relocations is
  often used in animal movement analysis (e.g. Root and Kareiva
  1984, Marsh and Jones 1988);\\
\item \texttt{abs.angle}: the absolute angle $\alpha_i$ between the
  $x$ direction and the step built by relocations $i$ and $i+1$ is
  sometimes used together with the parameter \texttt{dist} to fit
  movement models (e.g. Marsh and Jones 1988);\\
\item \texttt{rel.angle}: the relative angle $\beta_i$ measures the
  change of direction between the step built by relocations $i-1$ and
  $i$ and the step built by relocations $i$ and $i+1$ (often called
  ``turning angle''). It is often used together with the parameter
  \texttt{dist} to fit movement models (e.g. Root and Kareiva 1984,
  Marsh and Jones 1988);\\
\item \texttt{R2n}: the squared distance between the first relocation
  of the trajectory and the current relocation is often used to test
  some movements models (e.g. the correlated random walk, see the
  seminal paper of Kareiva and Shigesada, 1983).\\
\end{itemize}


\subsection{Several bursts of relocations}

Very often, animal monitoring leads to several ``bursts'' of
relocations for each monitored animal. For example, a GPS collar may
be programmed to return one relocation every ten minutes during the
night and no relocation during the day. Each night corresponds to a
burst of relocations for each animal. We designed the class
\texttt{ltraj} to take into account this burst structure.

\subsection{Understanding the class \texttt{ltraj}}
\label{sec:ltraj}

An object of class \texttt{ltraj} is created with the function
\texttt{as.ltraj} (see the help page of this function). We will take
an example to illustrate the creation of an object of class
\texttt{ltraj}. First load the dataset \texttt{puechabonsp} from the
package \texttt{adehabitatMA}:

<<>>=
data(puechabonsp)
locs <- puechabonsp$relocs
locs <- as.data.frame(locs)
head(locs)
@

The data frame \texttt{locs} contains the relocations of 4 wild
boar monitored using radio-tracking at Puechabon (Near Montpellier,
South of France). First the date needs to be transformed into an
object of the class \texttt{POSIXct}.\\

\noindent \textit{Remark:} The class \texttt{POSIXt} is designed to
store time data in R (see the very clear help page of
\texttt{POSIXt}). This class extends two sub-classes:\\
\begin{itemize}
\item \textbf{the class \texttt{POSIXlt}}: This class stores a date in
  a list containing several elements related to this date (day of the
  month, day of the week, day of the year, month, year, time zone,
  hour, minute, second).\\

\item \textbf{the class \texttt{POSIXct}}: This class stores a date in
  a vector, as the number of seconds passed since January, 1st, 1970
  at 1AM. This class is more convenient for storing dates into a data
  frame.\\
\end{itemize}

We will use the function \texttt{strptime} (see the help page of this
function) to convert the date in \texttt{locs} into a \texttt{POSIXlt}
object, as then \texttt{as.POSIXct} to convert it into the class
\texttt{POSIXct}:


<<>>=
da <- as.character(locs$Date)
head(da)
da <- as.POSIXct(strptime(as.character(locs$Date),"%y%m%d"))
@

We can then create an object of class \texttt{ltraj} to store the wild
boar movements:

<<>>=
puech <- as.ltraj(xy = locs[,c("X","Y")], date = da, id = locs$Name)
puech
@

The result is a list of class ltraj containing four bursts of
relocations corresponding to four animals. The trajectory is of type
II and is irregular. There are no missing values. \\

This object is actually a list containing 4 elements (the four
bursts). Each element is a data frame. Have a look, for example, at
the first rows of the first data frame:

<<>>=
head(puech[[1]])
@

The function \texttt{as.ltraj} has automatically computed the
descriptive parameters described in section \ref{sec:param} from the x
and y coordinates, and from the date. Note that \texttt{dx,dy,dist}
are expressed in the units of the coordinates \texttt{x,y} (here,
metres) and \texttt{abs.angle,rel.angle} are expressed in radians.\\

\noindent A graphical display of the bursts can be obtained simply by:

<<label=plottrajjj,echo=FALSE,fig=FALSE,eval=FALSE>>=
plot(puech)
@

<<results=tex,echo=TRUE,fig=FALSE,eval=FALSE>>=
<<plottrajjj>>
@

\begin{center}
<<results=tex,echo=FALSE>>=
<<afig>>
<<plottrajjj>>
<<zfig>>
@
\end{center}


\subsection{Two points of views: steps (ltraj) or points (data.frame)?}

We noted in the previous section that, in \texttt{adehabitatLT}, we
consider the trajectory as a collection of successive ``steps''
ordered in time. We will see later in this vignette that most
functions of \texttt{adehabitatLT} deal with trajectories considered
from this point of view. However, several users
(in particular, many thanks to Mathieu Basille and Bram van Moorter)
noted that although this point of view may be useful to manage and
analyse trajectories, it may be too restrictive to allow an easy
management of such data.\\

Actually, the trajectory data may also be considered as a set of
successive \textit{points} (the relocations) ordered in time. At first
sight, the distinction between these two models may seem trivial, but
it is important to consider it in several cases.\\

For example, any slight change in the coordinates/date of a relocation
will change the value of all derived statistics (\texttt{dt},
\texttt{dist}, etc.). In the previous versions of adehabitat, it was
possible to change directly the values of coordinates/dates in the
object, and then to compute again the steps characteristics thanks to
the function \texttt{rec} (it is still possible in the present
version, but not recommended).\\

For example, consider the object \texttt{puech} created in the
previous section. Have a look at the first relocations of the first burst:

<<>>=
head(puech[[1]])
@

Imagine that we realize that the X coordinate of the second relocation
is actually equal to 700146 instead of 700046:

<<>>=
puech2 <- puech
puech2[[1]][2,1] <- 700146
head(puech2[[1]])
@

The coordinate has been changed, but the step characteristics are now
incorrect. The function \texttt{rec} recompute these statistics
according to these changes:

<<>>=
head(rec(puech2)[[1]])
@

Although the function \texttt{rec} can be useful for sporadic use, it
is limited when a larger number of modifications is required on the
relocations (e.g. filtering incorrect relocations when ``cleaning''
GPS monitoring data). This is where the class \texttt{ltraj} does not
fit. For such work, it is more convenient to see the trajectory as a set
of points located in both space and time. And for such operations, it
is sometimes more convenient to work with data frames. Two functions
are provided to quickly convert a ltraj to and from data.frames: the
functions \texttt{ld} and \texttt{dl}.

The function \texttt{ld} allows to quickly convert an object of class
\texttt{ltraj} to the class \texttt{data.frame}. Consider for example
the object \texttt{puech} created in the previous section. We can
quickly convert this object towards the class \texttt{data.frame}:

<<>>=
puech2 <- ld(puech)
head(puech2)
@

Note that the data frame contains all the descriptors of the steps. In
addition, two variables \texttt{burst} and \texttt{id} allow to
quickly convert this object back towards the class \texttt{ltraj},
with the function \texttt{dl}:

<<>>=
dl(puech2)
@

Using \texttt{dl} and \texttt{ld} can be extremey useful during the
first steps of the analysis, especially during data ``cleaning''.




\section{Managing objects of class \texttt{ltraj}}

\subsection{Cutting a burst into several segments}

Now, let us analyse the object \texttt{puech} created in the previous
section. We noted that the object \texttt{puech} was not regular:

<<>>=
is.regular(puech)
@

\noindent The function \texttt{is.regular} returns a Boolean... such a
result can be obtained from a regular trajectory where just one
relocation is missing, or from a completely irregular trajectory... we
need more precision!\\

Have a look at the value of \texttt{dt} according to the date, using
the function \texttt{plotltr}. Because \texttt{dt} is measured in
seconds and that no more than one relocation is coellected every day,
we convert this time lag into days by dividing it by 24 (hours/day)
$\times$ 3600 (seconds / hour):

<<label=plotdtltr,echo=FALSE,fig=FALSE,eval=FALSE>>=
plotltr(puech, "dt/3600/24")
@

<<results=tex,echo=TRUE,fig=FALSE,eval=FALSE>>=
<<plotdtltr>>
@

\begin{center}
<<results=tex,echo=FALSE>>=
<<afig>>
<<plotdtltr>>
<<zfig>>
@
\end{center}

\noindent The wild boar Chou was monitored during two successive
summers (1992 and 1993). We need to ``cut'' this burst into two
``sub-burst''. We will use the function \texttt{cutltraj} to
proceed. We first define a function \texttt{foo} that returns
\texttt{TRUE} when the time lag between two successive relocations is
greater than 100 days:

<<>>=
foo <- function(dt) {
    return(dt> (100*3600*24))
}
@

\noindent Then, we use the function \texttt{cutltraj} to cut any burst
relocations with a value of \texttt{dt} such that \texttt{foo(dt)} is
true, into several bursts for which no value of \texttt{dt} fullfills
this criterion:

<<>>=
puech2 <- cutltraj(puech, "foo(dt)", nextr = TRUE)
puech2
@

\noindent Now, note that the burst of \texttt{Chou} has been splitted
into two bursts: the first burst corresponds to the monitoring of Chou
during 1992, and the second burst corresponds to the monitoring of
Chou during 1993. We can give more explicit names to these bursts:

<<>>=
burst(puech2)[3:4] <- c("Chou.1992", "Chou.1993")
puech2
@

\noindent Note that the function \texttt{id()} can be used similarly
to replace the IDs of the animals.\\


\subsection{Playing with bursts}

The bursts in an object \texttt{ltraj} can be easily managed. For
example, consider te object \texttt{puech2} created previously:

<<>>=
puech2
@

\noindent Imagine that we want to work only on the males (Brock, Calou
and Jean). We can subset this object using a classical extraction
function:

<<>>=
puech2b <- puech2[c(1,2,5)]
puech2b
@

\noindent Or, if we want to study the animals monitored in 1993, we
may combine this object with the monitoring of Chou in 1993:

<<>>=
puech2c <- c(puech2b, puech2[4])
puech2c
@

\noindent It is also possible to select the bursts according to their
id of their burst id (see the help page of \texttt{Extract.ltraj} for
additional information, and in particular the example section).\\

The function \texttt{which.ltraj} can also be used to identify the
bursts satisfying a condition. For example, imagine that we want to
identify the bursts where the distance between successive
relocations was greater than 2000 metres at least once:

<<>>=
bu <- which.ltraj(puech2, "dist>2000")
bu
@

\noindent This data frame contains the ID, burst ID and relocation
numbers satisfying the specified criterion. We can then extract the
bursts satisfying this criterion:

<<>>=
puech2[burst(puech2)%in%bu$burst]
@


\subsection{Placing the missing values in the trajectory}
\label{sec:NA}

Now, look again at the time lag between successive relocations:

<<label=plotltr2bu,echo=FALSE,fig=FALSE,eval=FALSE>>=
plotltr(puech2, "dt/3600/24")
@

<<results=tex,echo=TRUE,fig=FALSE,eval=FALSE>>=
<<plotltr2bu>>
@

\begin{center}
<<results=tex,echo=FALSE>>=
<<afig>>
<<plotltr2bu>>
<<zfig>>
@
\end{center}

\noindent The relocations have been collected daily, but there are
many days during which this relocation was not possible (storm, lack
of field workers, etc.). We need to add missing values to define a
regular trajectory. To proceed, we will use the function
\texttt{setNA}. We have to define a reference date:

<<>>=
refda <- strptime("00:00", "%H:%M")
refda
@

This reference date will be used to check that each date in the object
of class \texttt{ltraj} is separated from this reference by an integer
multiple of the theoretical \texttt{dt} (here, one day), and place the
missing values at the times when relocations should theoretically have
been collected. We use the function \texttt{setNA}:

<<>>=
puech3 <- setNA(puech2, refda, 1, units = "day")
puech3
@

\noindent The trajectories are now regular, but there are now a lot of
missing values!

\subsection{Rounding the timing of the trajectories to define a
  regular trajectory}

In some cases, despite the fact that the relocations were expected to
be collected to return a regular trajectory, a minor
delay is sometimes observed in this timing. For
example, consider the monitoring of four ibex in the Belledonne
Mountains (French Alps):

<<>>=
data(ibexraw)
ibexraw
@

\noindent There is a variable time lag between successive
relocations. Look at the time lag between successive relocations:

<<label=plotibex,echo=FALSE,fig=FALSE,eval=FALSE>>=
plotltr(ibexraw, "dt/3600")
@

<<results=tex,echo=TRUE,fig=FALSE,eval=FALSE>>=
<<plotibex>>
@

\begin{center}
<<results=tex,echo=FALSE>>=
<<afig>>
<<plotibex>>
<<zfig>>
@
\end{center}

\noindent The relocations should have been collected every 4 hours,
but there are some missing values. Use the function \texttt{setNA} to
place the missing values, as in the section \ref{sec:NA}. We define a
reference date and place the missing values:

<<>>=
refda <- strptime("2003-06-01 00:00", "%Y-%m-%d %H:%M")
ib2 <- setNA(ibexraw, refda, 4, units = "hour")
ib2
@

\noindent Even when filling the gaps with NAs, the trajectory is still
not regular. Now, look again at the time lag between successive
relocations:

<<label=plotltrib2,echo=FALSE,fig=FALSE,eval=FALSE>>=
plotltr(ib2, "dt/3600")
@

<<results=tex,echo=TRUE,fig=FALSE,eval=FALSE>>=
<<plotltrib2>>
@

\begin{center}
<<results=tex,echo=FALSE>>=
<<afig>>
<<plotltrib2>>
<<zfig>>
@
\end{center}

\noindent We can see that the time lag is only slightly different from
4 hour. The function \texttt{sett0} can be used to ``round'' the
timing of the coordinates:

<<>>=
ib3 <- sett0(ib2, refda, 4, units = "hour")
ib3
@

\noindent The trajectory is now regular.\\

\noindent \textbf{Important note}: The functions \texttt{setNA} and
\texttt{sett0} are to be used to set a theoretically regular
trajectory into a practically regular trajectory. \textbf{It is NOT
  intended to transform an irregular trajectory into a regular one}
(many users of \texttt{adehabitat} asked this question).

\subsection{A special type of trajectories: same duration}
\label{sec:sdtraj}

In some cases, an object of class \texttt{ltraj} contains several
regular bursts of the same duration characterized by relocations
collected at the same time (same time lags between successive
relocations, same number of relocations). We can check whether an
object of class ``ltraj'' is of this type with the function
\texttt{is.sd}. For example, consider again the movement of 4 ibexes
monitored using GPS, stored in an object of class \texttt{ltraj}
created in the previous section:

<<>>=
is.sd(ib3)
@

\noindent This object is not of the type \texttt{sd} (same
duration). However, theoretically, all the trajectories should have
been sampled at the same time points. It is regular, but there are
mismatches between the time of the relocations:

<<>>=
ib3
@

\noindent This is caused by the fact that there are missing
relocations at the beginning and/or end of the monitoring for several
animals (A160 and A286). We can use the function \texttt{set.limits}
to define the time of beginning and ending of the trajectories. This
function adds NAs to the beginning and ending of the monitoring when
required:

<<>>=
ib4 <- set.limits(ib3, begin = "2003-06-01 00:00",
                  dur = 14, units = "day", pattern = "%Y-%m-%d %H:%M")
ib4
@

\noindent All the trajectory are now covering the same time period:

<<>>=
is.sd(ib4)
@


\noindent \textbf{Remark}: in our example, all the bursts are covering
exactly the same time period (all begin at the same time and date and
all stop at the same time and date). However, the function
\texttt{set.limits} is much more flexible. Imagine for example that we
are studying the movement of an animal during the night, from 00:00 to
06:00. If we have one
burst per night, then it is possible to define an object of class
\texttt{ltraj}, type \texttt{sd}, containing several nights of
monitoring, even if the nights of monitoring do not correspond to the
same date. If we consider that all the bursts cover the same period,
then it is still possible to use the function \texttt{set.limits} to
define an object of type \texttt{sd} (this is explained deeply on the
help page of \texttt{set.limits}).\\

It is then possible to store some parameters of \texttt{sd} objects
into a data frame (with one relocation per row and one burst per
column), using the function \texttt{sd2df}. For example, considering
the distance between successive relocations:

<<>>=
di <- sd2df(ib4, "dist")
head(di)
@

\noindent This data frame can then be used to study the interactions
or similarities between the bursts.




\subsection{Metadata on the trajectories (Precision of the
  relocations, etc.)}

Sometimes, additional information is available for each relocation,
and we may wish to store this information in the object of class
\texttt{ltraj}, to allow the analysis of the relationships between
these additional variables and the parameters of the trajectory.\\

This meta information can be stored in the attribute \texttt{infolocs}
of each burst. This should be defined when creating the object
\texttt{ltraj}, \textit{but can also be defined later} (see section
\ref{sec:ras} for an example). For example, load the dataset
\texttt{capreochiz}:

<<>>=
data(capreochiz)
head(capreochiz)
@

This dataset contains the relocations of one roe deer monitored using
a GPS collar in the Chize forest (Deux-Sevres, France). This dataset
contains the x and y coordinates (in kilometres), the date, and
several variables characterizing the precision of the
relocations. Note that the date is already of class
\texttt{POSIXct}. We now define the object of class \texttt{ltraj},
storing the variables \texttt{Dop, Status, Temp, Act, Conv} in the
attribute \texttt{infolocs} of the object:

<<>>=
capreo <- as.ltraj(xy = capreochiz[,c("x","y")], date = capreochiz$date,
                   id = "Roe.Deer",
                   infolocs = capreochiz[,4:8])
capreo
@

The object \texttt{capreo} can be managed as usual. The function
\texttt{infolocs()} can be used to retrieve the attributes
\texttt{infolocs} of the bursts building up a trajectory:

<<>>=
inf <- infolocs(capreo)
head(inf[[1]])
@

The function \texttt{removeinfo} can be used to set the attribute
\texttt{infolocs} of all bursts to \texttt{NULL}.\\

Note that it is required that:\\
\begin{itemize}
\item all the burst are characterized by the same variables in the
  attribute \texttt{infolocs}. For example, it is not possible to
  store only the variable \texttt{Dop} for one burst and only the
  variable \texttt{Status} for another burst into the same object;\\

\item each row of the data frame stored as attributes
  \texttt{infolocs} correspond to one relocation (that is, the number
  of rows of the attribute should be the same as the number of
  relocations in the corresponding burst).\\
\end{itemize}

Most functions of the package \texttt{adehabitatLT} do manage this
attribute. For example, the functions \texttt{cutltraj} and
\texttt{plotltr} can be used by calling variables stored in this
attribute (as well as many other functions). For example:

<<label=plotdop,echo=FALSE,fig=FALSE,eval=FALSE>>=
plotltr(capreo, "log(Dop)")
@

<<results=tex,echo=TRUE,fig=FALSE,eval=FALSE>>=
<<plotdop>>
@

\begin{center}
<<results=tex,echo=FALSE>>=
<<afig>>
<<plotdop>>
<<zfig>>
@
\end{center}



\section{Analyzing the trajectories}

In this section, we will describe several tools available in
\texttt{adehabitatLT} to analyse a trajectory.


\subsection{Randomness of the missing values}

A first important point is the examination of the distribution of the
missing values in the trajectory. Missing values are frequent in the
trajectories of animals collected using telemetry (e.g., GPS collar
may not receive the signal of the satellite at the time of relocation,
due for example to the habitat structure obscuring the signal, etc.).
As noted by Graves and Waller (2006), the analysis of the patterns of
missing values should be part of trajectory analysis.\\

The package \texttt{adehabitatLT} provides several tools for this
analysis. For example, consider the object \texttt{ib4} created in
section \ref{sec:sdtraj}, and containing 4 bursts describing the
movements of 4 ibexes in the Belledonne moutain. We can first test
whether the missing values occur at random in the monitoring using the
function \texttt{runsNAltraj}:

<<label=NAtest,echo=FALSE,fig=FALSE,eval=FALSE>>=
runsNAltraj(ib4)
@

<<results=tex,echo=TRUE,fig=FALSE,eval=FALSE>>=
<<NAtest>>
@

\begin{figure}[htbp]
\begin{center}
<<results=tex,echo=FALSE>>=
<<afig>>
<<NAtest>>
<<zfig>>
@
\end{center}
\end{figure}

In this case, no difference appears between the number of runs
actually observed in our trajectories and the distribution of the
number of runs under the hypothesis of a random distribution of the
NAs. The hypothesis of a random distribution of the NAs seems
reasonable here.\\

But now, consider the distribution of the missing values in the case
of the monitoring of one brown bear using a GPS collar:

<<>>=
data(bear)
bear
@

\noindent This trajectory is regular. The bear was monitored during
one month, with one relocation every 30 minutes. We now test for a
random distribution of the missing values for this trajectory:


<<label=runsNAbear,echo=FALSE,fig=FALSE,eval=FALSE>>=
runsNAltraj(bear)
@

<<results=tex,echo=TRUE,fig=FALSE,eval=FALSE>>=
<<runsNAbear>>
@

\begin{center}
<<results=tex,echo=FALSE>>=
<<afig>>
<<runsNAbear>>
<<zfig>>
@
\end{center}

\noindent In this case, the missing values are not distributed at
random. Have a look at the distribution of the missing values:

<<label=plotNAbear,echo=FALSE,fig=FALSE,eval=FALSE>>=
plotNAltraj(bear)
@

<<results=tex,echo=TRUE,fig=FALSE,eval=FALSE>>=
<<plotNAbear>>
@

\begin{center}
<<results=tex,echo=FALSE>>=
<<afig>>
<<plotNAbear>>
<<zfig>>
@
\end{center}

Because of the high number of relocations in this trajectory, this
graph is not very clear. So a better way to study the distribution of
the missing values is to work directly on the vector indicating
whether the relocations are missing or not. That is:

<<>>=
missval <- as.numeric(is.na(bear[[1]]$x))
head(missval)
@

\noindent This vector can then be analyzed using classical time series
methods (e.g. Diggle 1990). We do not pursue on this aspect, as this
is not the aim of this vignette to describe time series methods.

\subsection{Should we consider the time?}

\subsubsection{Type II or type I?}

Until now, we have only considered trajectories of type II (time
recorded). However, a common approach to the analysis of animal
movements is to consider the movement as a discretized curve, and to
study the geometrical properties of this curve (e.g., Turchin 1998;
Benhamou 2004). That
is, even if the data collection implied the recording of the time, it
is often more convenient to consider the monitored movement as a
trajectory of type I. There are two ways to define a type I trajectory
with the functions of \texttt{adehabitatLT}. The first is to set the
argument \texttt{typeII=FALSE} when calling the function
\texttt{as.ltraj}. The second is to use the function
\texttt{typeII2typeI}. For example, considering the trajectory of the
bear loaded in the previous section, we can transform it into a type I
object by:

<<>>=
bearI <- typeII2typeI(bear)
bearI
@

Nothing has changed, except that the time is replaced by an integer
vector ordering the relocations in the trajectory.

\subsubsection{Rediscretizing the trajectory}

Several authors have advised to rediscretize type I trajectories so
that they are built by steps with a constant length (e.g. Turchin
1998). This is a convenient approach to the analysis, as all the
geometrical properties of the trajectory can be summarized by studying
the variation of the relative angles.\\

The function \texttt{redisltraj} can be used for this
rediscretization. For example, look at the trajectory of the brown
bear stored in \texttt{bearI} (created in the previous section):

<<label=trajetours,echo=FALSE,fig=FALSE,eval=FALSE>>=
plot(bearI)
@

<<results=tex,echo=TRUE,fig=FALSE,eval=FALSE>>=
<<trajetours>>
@

\begin{center}
<<results=tex,echo=FALSE>>=
<<afig>>
<<trajetours>>
<<zfig>>
@
\end{center}

\noindent Now, rediscretize this trajectory with constant step length
of 500 metres:

<<>>=
bearIr <- redisltraj(bearI, 500)
bearIr
@

\noindent The number of relocations has increased. Have a look at the
rediscretized trajectory:

<<label=plotltrajredisbear,echo=FALSE,fig=FALSE,eval=FALSE>>=
plot(bearIr)
@

<<results=tex,echo=TRUE,fig=FALSE,eval=FALSE>>=
<<plotltrajredisbear>>
@

\begin{center}
<<results=tex,echo=FALSE>>=
<<afig>>
<<plotltrajredisbear>>
<<zfig>>
@
\end{center}

\noindent Then, the geometrical properties can be studied by examining
the distribution of the relative angles. For example, the function
\texttt{sliwinltr} can be used to smooth the cosine of relative angle
using a sliding window method:

<<label=sliwinltr,echo=FALSE,fig=FALSE,eval=FALSE>>=
sliwinltr(bearIr, function(x) mean(cos(x$rel.angle)), type="locs", step=30)
@

<<results=tex,echo=TRUE,fig=FALSE,eval=FALSE>>=
<<sliwinltr>>
@

\begin{center}
<<results=tex,echo=FALSE>>=
<<afig>>
<<sliwinltr>>
<<zfig>>
@
\end{center}

The beginning of the trajectory is characterized by mean cosine close
to 0.5 (tortuous trajectory). Then the movements of the animal is more
linear (i.e., less tortuous). A finer analysis should now be done on
these data. So that we need to get the relative angles from this
rediscretized trajectory:

<<>>=
cosrelangle <- cos(bearIr[[1]]$rel.angle)
head(cosrelangle)
@

This vector can now be analyzed using classical time series analysis
methods. We do not pursue this analysis further, as this is beyond the
scope of this vignette.

\subsection{Dynamic exploration of a trajectory}

The package \texttt{adehabitatLT} provides a function very useful for
the dynamic exploration of animal movement: the function
\texttt{trajdyn}. This function allows to dynamically zoom/unzoom,
measure distance between several bursts or several relocations,
explore the trajectory in space and time, etc. For example, the ibex
data set is explored by typing:

<<eval=FALSE>>=
trajdyn(ib4)
@

\begin{center}
\includegraphics[height=10cm,keepaspectratio]{trajdyn}
\end{center}

\noindent Note that this function can draw a background defined by an
object of class \texttt{SpatialPixelsDataFrame} or
\texttt{SpatialPolygonsDataFrame}.



\subsection{Analyzing autocorrelation}

Dray et al. (2010) noted that the analysis of the sequential
autocorrelation of the descriptive parameters presented in section
\ref{sec:param} is essential to the understanding of the mechanisms
driving these movements. The approach proposed by these authors is
implemented in \texttt{adehabitatLT}. In this section, we describe the
functions that can be used to carry out this kind of analysis.\\

A positive autocorrelation of a parameter means that values taken near
to each other tend to be either more similar (positive
autocorrelation) or less similar (negative autocorrelation) than would
be expected from a random arrangement.\\


\subsubsection{Testing for autocorrelation of the linear parameters}

The independence test of Wald and Wolfowitz (1944) is implemented in
the generic function \texttt{wawotest}. Basically, this function can
be used to test the sequential autocorrelation in a vector. However,
the method \texttt{wawotest.ltraj} allows to test autocorrelation for
the three \textit{linear} parameters \texttt{dx}, \texttt{dy} and
\texttt{dist} for each burst in an object of class \texttt{ltraj}. For
example, consider again the monitoring of movements of the bear:

<<>>=
wawotest(bear)
@

Note that this function removes the missing values before the
test. The row \texttt{p} indicates the P-value of the test. We can
see that the three linear parameters are strongly positively
autocorrelated. There are periods during which the animal is traveling
at large speed and periods when the animals are walking at lower
speed. Note that this was already apparent on the graph showing the
changes with time of the distance between successive relocations:

<<label=plotltrbeardist,echo=FALSE,fig=FALSE,eval=FALSE>>=
plotltr(bear, "dist")
@

<<results=tex,echo=TRUE,fig=FALSE,eval=FALSE>>=
<<plotltrbeardist>>
@

\begin{center}
<<results=tex,echo=FALSE>>=
<<afig>>
<<plotltrbeardist>>
<<zfig>>
@
\end{center}

\noindent This was even clearer on the graph showing the moving
average of the distance (with a window of 5 days):

<<eval=FALSE>>=
sliwinltr(bear, function(x) mean(na.omit(x$dist)),
          5*48, type="locs")
@

\noindent (not executed in this report).


\subsubsection{Analyzing the autocorrelation of the parameters}

The autocorrelation function (ACF) $\rho(a)$ measures the correlation
between a parameter measured at time $t$ and the same parameter
measured at time $t-a$ in the same time series (Diggle, 1990). This
allows to analyze the autocorrelation, and to identify the scales at
which this autocorrelation occurs. Dray et al. (2010) noted that the
autocorrelation function measured at lag 1 ($\rho(1)$) is
mathematically equivalent to the independence test of Wald and
Wolfowitz (1944).\\

Dray et al. (2010) extended the mathematical bases underlying the ACF
to handle the missing data occurring frequently in the
trajectories. Their approach is implemented in the function
\texttt{acfdist.ltraj} (the management of NAs is described in detail
on the help page of this function). For example, consider again the
monitoring of a brown bear:

<<label=acfdistltra,echo=FALSE,fig=FALSE,eval=FALSE>>=
acfdist.ltraj(bear, lag=5, which="dist")
@

<<results=tex,echo=TRUE,fig=FALSE,eval=FALSE>>=
<<acfdistltra>>
@

\begin{center}
<<results=tex,echo=FALSE>>=
<<afig>>
<<acfdistltra>>
<<zfig>>
@
\end{center}

We have calculated here the ACF for the distance for a time lag up to
5 relocations. The interested reader can try to calculate the ACF for
trajectories up to 100 relocations to see the cyclic patterns
occurring in this trajectory.

\subsubsection{Testing autocorrelation of the angles}

The test of the autocorrelation of the angular parameters (relative or
absolute angles, see section \ref{sec:param}) is based on the chord
distance between successive angles (see Dray et al. 2010 for
additional details):


<<label=critereangle,echo=FALSE,fig=FALSE,eval=FALSE>>=
opar <- par(mar = c(0,0,4,0))
plot(0,0, asp=1, xlim=c(-1, 1), ylim=c(-1, 1), ty="n", axes=FALSE,
     main="Criteria f for the measure of independence between successive
     angles at time i-1 and i")
box()
symbols(0,0,circle=1, inches=FALSE, lwd=2, add=TRUE)
abline(h=0, v=0)
x <- c( cos(pi/3), cos(pi/2 + pi/4))
y <- c( sin(pi/3), sin(pi/2 + pi/4))
arrows(c(0,0), c(0,0), x, y)
lines(x,y, lwd=2, col="red")
text(0, 0.9, expression(f^2 == 2*sum((1 - cos(alpha[i]-alpha[i-1])),
    i==1, n-1)), col="red")
foo <- function(t, alpha)
{
    xa <- sapply(seq(0, alpha, length=20), function(x) t*cos(x))
    ya <- sapply(seq(0, alpha, length=20), function(x) t*sin(x))
    lines(xa, ya)
}
foo(0.3, pi/3)
foo(0.1, pi/2 + pi/4)
foo(0.11, pi/2 + pi/4)
text(0.34,0.18,expression(alpha[i]), cex=1.5)
text(0.15,0.11,expression(alpha[i-1]), cex=1.5)
par(opar)
@

\begin{center}
<<results=tex,echo=FALSE>>=
<<afig>>
<<critereangle>>
<<zfig>>
@
\end{center}

For example, the function \texttt{testang.ltraj} is a randomization
test using the mean squared chord distance as a criteria. For example,
considering again the trajectory of the bear, we can test the
autocorrelation of the relative angles between successive moves:

<<>>=
testang.ltraj(bear, "relative")
@

\subsubsection{Analyzing the autocorrelation of angular parameters}

Dray et al. (2010) extended the ACF to angular parameters by
considering the chord distance as a criteria to build the ACF. This
approach is implemented in the function
\texttt{acfang.ltraj}. Considering again the \texttt{bear} dataset:

<<label=acfangbear,echo=FALSE,fig=FALSE,eval=FALSE>>=
acfang.ltraj(bear, lag=5)
@

<<results=tex,echo=TRUE,fig=FALSE,eval=FALSE>>=
<<acfangbear>>
@

\begin{center}
<<results=tex,echo=FALSE>>=
<<afig>>
<<acfangbear>>
<<zfig>>
@
\end{center}

We can see that the relative angle observed at time $i$ is
significantly correlated with the angle observed at time $i-1$.


\subsection{Partitioning a trajectory into segments characterized by a
  homogenous behaviour}

We implemented a new approach to the partitioning of movement data,
relying on a Bayesian partitioning of a sequence. This approach was
originally developed in molecular biology, to partition DNA
sequences (Gueguen 2001). We describe this approach in this section.\\

Biologically, a positive autocorrelation in any of the descriptive
parameters may mean that the animal behaviour is changing with time
(there are periods during which the animal is feeding, other during
which the animal is resting, etc.). The idea is then to partition the
trajectory of the animal into homogenous segments.\\

We will use the movements of a porpoise monitored using an Argos
collar to illustrate this method. First we load the data:

<<>>=
data(porpoise)
gus <- porpoise[1]
gus
@

\noindent The trajectory is regular and is built by relocations
collected every 24 hours during two months. Plot the data:

<<label=pltgus,echo=FALSE,fig=FALSE,eval=FALSE>>=
plot(gus)
@

<<results=tex,echo=TRUE,fig=FALSE,eval=FALSE>>=
<<pltgus>>
@

\begin{center}
<<results=tex,echo=FALSE>>=
<<afig>>
<<pltgus>>
<<zfig>>
@
\end{center}

Visually, \textbf{the trajectory seems to be built by three
  segments}. At the very beginning of the trajectory, the animal is
performing very short moves. Then, the animal is travelling faster
toward the southwest, and finally, the animal is again performing very
small moves.\\

We can draw the ACF for the distance between successive relocations to
illustrate the autocorrelation pattern from another point of view:

<<label=acfgus,echo=FALSE,fig=FALSE,eval=FALSE>>=
acfdist.ltraj(gus, "dist", lag=20)
@

<<results=tex,echo=TRUE,fig=FALSE,eval=FALSE>>=
<<acfgus>>
@

\begin{center}
<<results=tex,echo=FALSE>>=
<<afig>>
<<acfgus>>
<<zfig>>
@
\end{center}

There is a strong autocorrelation pattern present in the data, up to
lag 8. We can plot the distances between successive relocations
according to the date

<<label=plodisgus,echo=FALSE,fig=FALSE,eval=FALSE>>=
plotltr(gus, "dist")
@

<<results=tex,echo=TRUE,fig=FALSE,eval=FALSE>>=
<<plodisgus>>
@

\begin{center}
<<results=tex,echo=FALSE>>=
<<afig>>
<<plodisgus>>
<<zfig>>
@
\end{center}

Now, let us suppose that the distances between successive relocations
have been generated by a normal distribution, with different means
corresponding to different behaviours. Let us built 10 models
corresponding to 10 values of the mean distance ranging from 0 to 130
km/day:

<<>>=
(tested.means <- round(seq(0, 130000, length = 10), 0))
@

Based on the visual exploration of the distribution of distance, we
set the standard deviation of the distribution to 5 km. We can now
define 10 models characterized by 10 different values of means and
with a standard deviation of 5 km:

<<>>=
(limod <- as.list(paste("dnorm(dist, mean =",
                        tested.means,
                        ", sd = 5000)")))
@

The approach of Gueguen (2001) allows, based on these a priori models,
to find both the number and the limits of the segments building up the
trajectory.  Any model can be supposed for any parameter of the steps
(the distance, relative angles, etc.), provided that the model is
Markovian.\\

Given the set of \textit{a priori} models, for a given step of the
trajectory, it is possible to compute the probability density that the
step has been generated by each model of the set.  The function
\texttt{modpartltraj} computes the matrix containing the probability
densities associated to each step (rows), under each model of the
set (columns):

<<>>=
mod <- modpartltraj(gus, limod)
mod
@

Then, we can estimate the optimal number of segments in the
trajectory, given the set of \textit{a priori} models, using the
function \texttt{bestpartmod}, taking as argument the matrix
\texttt{mod}:

<<label=bpmgus,echo=FALSE,fig=FALSE,eval=FALSE>>=
bestpartmod(mod)
@

<<results=tex,echo=TRUE,fig=FALSE,eval=FALSE>>=
<<bpmgus>>
@

\begin{center}
<<results=tex,echo=FALSE>>=
<<afig>>
<<bpmgus>>
<<zfig>>
@
\end{center}


This graph presents the value of the log-likelihood (y) that the
trajectory is actually made of $K$ segments (x). Note that this
log-likelihood is actually corrected using the method of Gueguen
(2001) (which implies the Monte Carlo simulation of the independence
of the steps in the trajectory -- explaining the boxplots --, see the
help page of \texttt{bestpartmod} for further details on this
procedure). In this case, the method indicates that 4 segments are a
reasonable choice for the partitioning. \textbf{This is a surprise for
  us, as we rather expected 3 segments} (actually, the number of
segments returned by the function depend on the models supposed
\textit{a priori}).\\

Finally, the function \texttt{partmod.ltraj} can be used to
compute the partition. The mathematical rationale underlying these two
functions is the following: given an optimal $k$-partition of the
trajectory, if the $i^{th}$ step of the trajectory belongs to the
segment $k$ predicted by the model $d$, then either the relocation
$i-1$ belongs to the same segment, in which case the segment
containing $i-1$ is predicted by $d$, or the relocation $i-1$ belongs
to another segment, and the other $(k-1)$ segments together constitute
an optimal $(k-1)$ partition of the trajectory [1--$(i-1)$]. These two
probabilities are computed recursively by the functions from the
matrix \texttt{mod}, observing that the probability of a 1-partition
(partition built by one segment) of the trajectory from 1 to $i$
described by the model $m$ is simply the product of the probability
densities of the steps from 1 to i under the model m.\\

\noindent \textbf{Remark:} this approach relies on the hypothesis of
the independence of the steps within each segment.\\

Now, use the function \texttt{partmod.ltraj} to partition the
trajectory of the porpoise into 4 segments:

<<>>=
(pm <- partmod.ltraj(gus, 4, mod))
@

We can see that the models at the beginning of the trajectory and at
the end of the trajectory are the same. Have a look at this partition:

<<label=plotpartitiongus,echo=FALSE,fig=FALSE,eval=FALSE>>=
plot(pm)
@

<<results=tex,echo=TRUE,fig=FALSE,eval=FALSE>>=
<<plotpartitiongus>>
@

\begin{center}
<<results=tex,echo=FALSE>>=
<<afig>>
<<plotpartitiongus>>
<<zfig>>
@
\end{center}


This is very interesting: we already noted that the movements at the
very beginning and the end of the trajectory were much slower that the
rest of the trajectory, and this is confirmed by this
partition. However, this partition illustrates a change of speed at
the middle of the ``migration''. The end of the migration is much
faster than the beginning. This is clearer on the graph showing the
changes in distance between successive relocations with the date. Let
us plot this graph together with the partition:\\

<<label=plotpartltr,echo=FALSE,fig=FALSE,eval=FALSE>>=
## Shows the partition on the distances:
plotltr(gus, "dist")
tmp <- lapply(1:length(pm$ltraj), function(i) {
    coul <- c("red","green","blue")[as.numeric(factor(pm$stats$mod))[i]]
    lines(pm$ltraj[[i]]$date, rep(tested.means[pm$stats$mod[i]],
                                  nrow(pm$ltraj[[i]])),
          col=coul, lwd=2)
})
@

<<results=tex,echo=TRUE,fig=FALSE,eval=FALSE>>=
<<plotpartltr>>
@

\begin{center}
<<results=tex,echo=FALSE>>=
<<afig>>
<<plotpartltr>>
<<zfig>>
@
\end{center}

The end of the migration is nearly two times faster than the beginning
of the migration.\\

To conclude, have a look at the residuals of this partitionning:

<<label=plotrespart,echo=FALSE,fig=FALSE,eval=FALSE>>=
## Computes the residuals of the partition
res <- unlist(lapply(1:length(pm$ltraj), function(i) {
    pm$ltraj[[i]]$dist - rep(tested.means[pm$stats$mod[i]],
                             nrow(pm$ltraj[[i]]))
}))
plot(res, ty = "l")
@

<<results=tex,echo=TRUE,fig=FALSE,eval=FALSE>>=
<<plotrespart>>
@

\begin{center}
<<results=tex,echo=FALSE>>=
<<afig>>
<<plotrespart>>
<<zfig>>
@
\end{center}

And a Wald and Wolfowitz test suggests that the residuals of this
partition are independent, confirming the validity of the approach:

<<>>=
wawotest(res)
@


\subsection{Rasterizing a trajectory}
\label{sec:ras}

In some cases, it may be useful to rasterize a trajectory. In
particular, when the aim of the study is to examine the habitat
traversed by the animal, this approach may be useful. For example,
consider the dataset \texttt{puechcirc}, containing 3 trajectories
of 2 wild boars. It may be useful to identify the habitat traversed
by the animal during each step. A habitat map is available in the
dataset \texttt{puechabonsp}:

<<label=imagerast1,echo=FALSE,fig=FALSE,eval=FALSE>>=
data(puechcirc)
data(puechabonsp)
mimage(puechabonsp$map)
@

<<results=tex,echo=TRUE,fig=FALSE,eval=FALSE>>=
<<imagerast1>>
@

\begin{center}
<<results=tex,echo=FALSE>>=
<<afig>>
<<imagerast1>>
<<zfig>>
@
\end{center}

We can rasterize the trajectories of the wild boars:

<<>>=
ii <- rasterize.ltraj(puechcirc, puechabonsp$map)
@

The result is a list containing 3 objects of class
"SpatialPointsDataFrame" (one per animal). Let us examine the first
one:

<<>>=
tr1 <- ii[[1]]
head(tr1)
@

This data frame contains the coordinates of the pixels traversed by
each step. For example, the rasterized trajectory for the first animal
is:

<<label=ksdfjk,echo=FALSE,fig=FALSE,eval=FALSE>>=
plot(tr1)
points(tr1[tr1[[1]]==3,], col="red")
@

<<results=tex,echo=TRUE,fig=FALSE,eval=FALSE>>=
<<ksdfjk>>
@

\begin{center}
<<results=tex,echo=FALSE>>=
<<afig>>
<<ksdfjk>>
<<zfig>>
@
\end{center}

The red points indicate the pixels traversed by the third step.
These results can be used to identify the habitat characteristics of
each step. For example, we may calculate the mean elevation for each
step. To proceed, we use the function \texttt{overlay} of the package
sp.

<<label=jklmmre,echo=FALSE,fig=FALSE,eval=FALSE>>=
ov <- overlay(puechabonsp$map, tr1)
mel <- puechabonsp$map[ov,]
mo <- tapply(mel[[1]], tr1[[1]], mean)
plot(mo, ty="l")
@

<<results=tex,echo=TRUE,fig=FALSE,eval=FALSE>>=
<<jklmmre>>
@

\begin{center}
<<results=tex,echo=FALSE>>=
<<afig>>
<<jklmmre>>
<<zfig>>
@
\end{center}

Here, we can see that the first animal stays on the plateau at the
beginning at the monitoring, then goes down to the crops,
and goes back to the plateau. It is easy to repeat the operation for
all the animals. We will make use of the \texttt{infolocs}
attribute. We first build a list containing data frames, each data
frame containing on variable describing the mean elevation traversed
by the animal between relocation $i-1$ and relocation $i$:


<<>>=
val <- lapply(1:length(ii), function(i) {

    ## get the rasterized trajectory
    tr <- ii[[i]]

    ## overlay with the map
    ov <- overlay(puechabonsp$map, tr)

    ## get the pixels of the map
    mel <- puechabonsp$map[ov,]

    ## calculate the mean elevation
    mo <- tapply(mel[[1]], tr[[1]], mean)

    ## prepare the output
    elev <- rep(NA, nrow(puechcirc[[i]]))

    ## place the average values at the right place
    ## names(mo) contains the step number (i.e. relocation
    ## number +1)
    elev[as.numeric(names(mo))+1] <- mo
    return(data.frame(elevation = elev))
})
@

\noindent Then, we define the \texttt{infolocs} attribute:

<<>>=
infolocs(puechcirc) <- val
@

\noindent and finally, we can plot the mean elevation as a function of
date:

<<label=ksdfjeiii,echo=FALSE,fig=FALSE,eval=FALSE>>=
plotltr(puechcirc, "elevation")
@

<<results=tex,echo=TRUE,fig=FALSE,eval=FALSE>>=
<<ksdfjeiii>>
@

\begin{center}
<<results=tex,echo=FALSE>>=
<<afig>>
<<ksdfjeiii>>
<<zfig>>
@
\end{center}



\subsection{Models of animal movements}

Several movement models have been proposed in the litteratured to
describe animal movements. The package \texttt{adehabitatLT} contains
several functions allowing to simulate these models. Such simulations
can be very useful to test hypotheses concerning a trajectory, because
all the descriptive parameters of the steps are also generated by the
functions. Actually, the package proposes 6 functions to simulate such
models:\\

\begin{itemize}
\item \texttt{simm.brown} can be used to simulate a Brownian motion;
\item \texttt{simm.crw} can be used to simulate a correlated random
  walk. This model has been often used to describe animal movements
  (Kareiva and Shigesada 1983);
\item \texttt{simm.mba} can be used to simulate an arithmetic Brownian
  motion (with a drift parameter and a covariance between the
  coordinates, see Brillinger et al. 2002);
\item \texttt{simm.bb} can be used to simulate a Brownian bridge
  motion (i.e. a Brownian motion constrained by a fixed start and end
  point);
\item \texttt{simm.mou} can be used to simulate a bivariate
  Ornstein-Uhlenbeck motion (often used to describe the sedentarity of
  an animal, e.g. Dunn and Gipson 1977);
\item \texttt{simm.levy} can be used to simulate a Levy walk, as
  described (Bartumeus et al. 2005).\\
\end{itemize}

All these functions return an object of class \texttt{ltraj}. For
example, simulate a correlated random walk built by 1000 steps
characterized by a mean cosine of the relative angles equal to 0.95 and
a scale parameter for the step length equal to 1 (see the help page of
\texttt{simm.crw} for additional details on the meaning of these
parameters):

<<>>=
sim <- simm.crw(1:1000, r=0.95)
sim
@

Note that the vector \texttt{1:1000} passes as an argument is
considered here as a vector of dates (it is converted to the class
\texttt{POSIXct} by the function, see section \ref{sec:ltraj} for more
details on this class). Other dates can be passed to the
functions. Have a look at the simulated trajectory:

<<label=plotcrwsim,echo=FALSE,fig=FALSE,eval=FALSE>>=
plot(sim, addp=FALSE)
@

<<results=tex,echo=TRUE,fig=FALSE,eval=FALSE>>=
<<plotcrwsim>>
@

\begin{center}
<<results=tex,echo=FALSE>>=
<<afig>>
<<plotcrwsim>>
<<zfig>>
@
\end{center}


\section{Conclusion and perspectives}

Several other methods can be used to analyze a trajectory. Thus, the
first passage time method, developed by Fauchald and Tveraa (2003) to
identify the areas where \textit{area restricted search} occur is
implemented in the function \texttt{fpt}. Several methods are
available in the package \texttt{adehabitatHR} to estimate a home
range based on objects of class \texttt{ltraj}. Thus, the Brownian
bridge kernel method (Bullard 1999, Horne et al. 2007), the biased
random bridge kernel method (Benhamou and Cornelis 2010, Benhamou
2011), and the product kernel algorithm (Keating and Cherry 2009) are
implemented in the functions \texttt{kernelbb} and \texttt{kernelkc}
respectively.\\

But one thing is important: at many places in this vignette, we have
noted that the descriptive parameters of the steps can be analysed as
a (possibly multiple) time series. The R environment provides many
functions to perform such analyses, and \textbf{we stress that the
  package \texttt{adehabitatLT} should be considered as a springboard
  toward such functions}.\\

We included in the package \texttt{adehabitatLT} several functions
allowing the analysis of animal movements. All the brother packages
\texttt{adehabitat*} contain a vignette similar to this one, which
explains not only the functions, but also in some cases the philosophy
underlying the analysis of animal space use.


\section*{References}
\begin{description}
\item Bartumeus, F., da Luz, M.G.E., Viswanathan, G.M. and Catalan,
  J. 2005. Animal search strategies: a quantitative random-walk
  analysis. Ecology, 86: 3078--3087.
\item Benhamou, S. and Cornelis, D. 2010. Incorporating movement
  behavior and barriers to improve kernel home range space use
  estimates. Journal of Wildlife Management, 74, 1353--1360.
\item Benhamou, S. 2011. Dynamic approach to space and habitat use
  based on biased random bridges. PLOS ONE, 6, 1--8.
\item Benhamou, S. 2004. How to reliably estimate the tortuosity of an
  animal's path: straightness, sinuosity, or fractal dimension?
  Journal of Theoretical Biology, 229, 209--220.
\item Brillinger, D., Preisler, H., Ager, A., Kie, J. and Stewart,
  B. 2002. Employing stochastic differential equations to model
  wildlife motion. Bulletin of the Brazilian Mathematical Society,
  2002, 33, 385-408.
\item Brillinger, D., Preisler, H., Ager, A. and Kie, J. 2004. An
  exploratory data analysis (EdA) of the paths of moving animals.
  Journal of Statistical Planning and Inference, 122, 43-63.
\item Bullard, F. 1999. Estimating the home range of an animal: a
  Brownian bridge approach Johns Hopkins University.
\item Calenge, C. 2005. Des outils statistiques pour l'analyse des
  semis de points dans l'espace ecologique. Universite Claude Bernard
  Lyon 1.
\item Calenge, C. 2006. The package adehabitat for the R software: a
  tool for the analysis of space and habitat use by
  animals. Ecological modelling, 197, 516--519.
\item Calenge, C., Dray, S. and Royer-Carenzi, M. 2009. The concept of
  animals' trajectories from a data analysis perspective. Ecological
  Informatics, 4, 34--41.
\item Diggle, P. 1990. Time series. A biostatistical introduction
  Oxford University Press.
\item Dray, S., Royer-Carenzi, M. and Calenge, C. 2010. The
  exploratory analysis of autocorrelation in animal-movement
  studies. Ecological Research, 4, 34-41.
\item Dunn, J. and Gipson, P. 1977. Analysis of radio telemetry data
  in studies of home range. Biometrics, 33, 85-101
\item Fauchald, P. and Tveraa, T. 2003. Using first-passage time in
  the analysis of area-restricted search and habitat selection
  Ecology, 84, 282-288.
\item Graves, T. and Waller, J. 2006. Understanding the causes of
  missed global positioning system telemetry fixes. Journal of
  Wildlife Management, 70, 844--851.
\item Gueguen, L. 2001. Segmentation by maximal predictive
  partitioning according to composition biases. Pp 32-44 in: Gascuel,
  O. and Sagot, M.F. (Eds.), Computational Biology, LNCS, 2066.
\item Horne, J., Garton, E., Krone, S. and Lewis, J. 2007. Analyzing
  animal movements using Brownian bridges. Ecology, 88, 2354--2363.
\item Kareiva, P. and Shigesada, N. 1983. Analysing insect movement as
  a correlated random walk. Oecologia, 56, 234--238.
\item Keating, K. and Cherry, S. 2009. Modeling utilization
  distributions in space and time. Ecology, 90, 1971--1980.
\item Marsh, L. and Jones, R. 1988. The form and consequences of
  random walk movement models. Journal of Theoretical Biology, 133,
  113--131.
\item Pebesma, E. and Bivand, R.S. 2005. Classes and Methods for
  Spatial data in R. R News, 5, 9--13.
\item Root, R. and Kareiva, P. 1984. The search for resources by
  cabbage butterflies (Pieris Rapae): Ecological consequences and
  adaptive significance of markovian movements in a patchy
  environment. Ecology, 65, 147--165.
\item Turchin, P. 1998. Quantitative Analysis of Movement: measuring
  and modeling population redistribution in plants and
  animals. Sinauer Associates, Sunderland, MA.
\item Wald, A. and Wolfowitz, J. 1944. Statistical Tests Based on
  Permutations of the Observations The Annals of Mathematical
  Statistics, 15, 358--372.
\item Wiktorsson, M., Ryden, T., Nilsson, E. and Bengtsson,
  G. 2004. Modeling the movement of a soil insect. Journal of
  Theoretical Biology, 231, 497--513.
\end{description}





\end{document}

% vim:syntax=tex
